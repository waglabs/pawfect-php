#!/usr/bin/env php
<?php declare(strict_types=1);

/*
 * This file is part of waglabs/pawfect-php.
 *
 * (C) 2021 Wag Labs, Inc.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

use Doctrine\Common\Annotations\AnnotationRegistry;
use League\Container\Container;
use League\Container\ReflectionContainer;
use Roave\BetterReflection\BetterReflection as BetterReflectionClass;
use Symfony\Component\Console\Application;
use WagLabs\PawfectPHP\FileLoader\FileLoader;
use WagLabs\PawfectPHP\PawfectPHPCommand;
use WagLabs\PawfectPHP\ReflectionClassLoader;
use WagLabs\PawfectPHP\ReflectionClassLoaderInterface;
use WagLabs\PawfectPHP\RuleRepository;
use WagLabs\PawfectPHP\RuleRepositoryInterface;

const PAWFECT_PHP_VERSION = '1.0.0';

$autoloadLocations = [
        __DIR__ . '/../vendor/autoload.php',
        __DIR__ . '/../../vendor/autoload.php',
        __DIR__ . '/../../../vendor/autoload.php',
        __DIR__ . '/../../../../vendor/autoload.php',
        __DIR__ . '/../../../../../vendor/autoload.php',
];

foreach ($autoloadLocations as $autoloadLocation) {
    if (file_exists($autoloadLocation)) {
        require_once($autoloadLocation);
        break;
    }
}

$application = new Application();

$application->setVersion(PAWFECT_PHP_VERSION);
$application->setName('Wag Labs pawfect-php by Andrew Breksa, Tyson Green, and contributors');

$container = new Container();
$container->delegate(
        new ReflectionContainer()
);

$reflectionClassLoader = new ReflectionClassLoader((new BetterReflectionClass())->astLocator());
$ruleRepository = new RuleRepository();

$container->share(ReflectionClassLoaderInterface::class, $reflectionClassLoader);
$container->share(RuleRepositoryInterface::class, $ruleRepository);

$application->add(new PawfectPHPCommand(
        new FileLoader(),
        $ruleRepository,
        $reflectionClassLoader,
        $container
));

AnnotationRegistry::registerLoader(function ($className) use ($reflectionClassLoader) {
    try {
        $reflectionClassLoader->loadFromFqn('\\' . ltrim($className, '\\'));

        return true;
    }
    catch (\Throwable $throwable) {
        return false;
    }
});

$application->run();
